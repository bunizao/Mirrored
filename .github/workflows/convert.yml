name: Extract plugin URLs and download sgmodule files

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '5,30,55 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq netcat-openbsd

      - name: Wait for Docker service to be ready
        run: |
          echo "Waiting for Docker service to be ready..."
          for i in {1..10}; do
            nc -z localhost 9101 && break
            sleep 10
          done

      - name: Download README.md
        run: |
          curl -s -o README.md https://raw.githubusercontent.com/luestr/ProxyResource/main/README.md

      - name: Extract .plugin URLs
        run: |
          grep -oP 'https?://[^ )"]+\?plugin=[^ )"]+' README.md > plugin_urls_raw.txt
          grep -oP '(?<=\?plugin=)[^ )"]+' plugin_urls_raw.txt > plugin_urls.txt

      - name: Process and download sgmodule files
        run: |
          mkdir -p Chores/sgmodule
          category="🚫 AD Block"
          encoded_category=$(echo "$category" | jq -sRr @uri)
          while read -r plugin_url; do
          plugin_name=$(basename "$plugin_url" .plugin)
          encoded_plugin_name=$(echo "$plugin_name" | jq -sRr @uri)
          download_url="http://localhost:9101/file/_start_/${plugin_url}/_end_/${encoded_plugin_name}.sgmodule?type=loon-plugin&target=surge-module&category=${encoded_category}"
          echo "Downloading from $download_url"
          curl -A "Surge Mac/2985" -L -o "Chores/sgmodule/${plugin_name}.sgmodule" "$download_url" || echo "Failed to download ${plugin_name}.sgmodule"
          done < plugin_urls.txt

      - name: Find and replace external JS resources
        continue-on-error: true  # 确保步骤在部分失败时继续执行
        run: |
          base_js_url="https://github.com/bunizao/Mirrored/raw/main/Chores/js"
          mkdir -p Chores/js
          for sgmodule_file in Chores/sgmodule/*.sgmodule; do
            echo "Processing $sgmodule_file"
            # 查找 .js 文件的外部链接
            js_links=$(grep -oP 'https?://[^ ]+\.js' "$sgmodule_file" || echo "")
            for js_link in $js_links; do
              js_filename=$(basename "$js_link")
              local_js_path="Chores/js/$js_filename"
              # 使用指定的 User-Agent 下载 .js 文件
              echo "Downloading $js_link to $local_js_path"
              if curl -A "Surge Mac/3272" -L -o "$local_js_path" "$js_link"; then
                echo "Download successful for $js_link"
                # 替换 sgmodule 文件中的链接为 GitHub 仓库的路径
                github_js_url="$base_js_url/$js_filename"
                sed -i "s|$js_link|$github_js_url|g" "$sgmodule_file"
              else
                echo "Failed to download $js_link, skipping..."
              fi
            done
          done

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add Chores/sgmodule/*.sgmodule Chores/js/*.js
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git stash -u
            git pull --rebase  # 同步远程仓库的最新更改以避免冲突
            git stash pop  # 恢复之前的更改
            git add Chores/sgmodule/*.sgmodule Chores/js/*.js  # 再次添加文件
            git commit -m "Update sgmodule files with GitHub-hosted JS resources"
            git push
          fi

name: Extract plugin URLs & build sgmodule

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '5,30,55 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports: [9100:9100, 9101:9101]

    env:
      MIRROR_RAW:  https://github.com/bunizao/Mirrored/raw/main/Chores/js
      MIRROR_KEY:  github.com/bunizao/Mirrored        # 排除条件

    steps:
      - uses: actions/checkout@v3

      - name: Setup git identity
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install curl jq netcat
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl jq netcat-openbsd

      - name: Wait for Script-Hub container (:9101)
        run: |
          for i in {1..20}; do
            nc -z localhost 9101 && exit 0
            sleep 5
          done
          echo "::error ::container not ready"; exit 1

      # ---------- 1. 抓 README 解析 .plugin ----------
      - name: Download ProxyResource README
        run: |
          curl -s -o README.md https://raw.githubusercontent.com/luestr/ProxyResource/main/README.md

      - name: Extract .plugin URLs
        run: |
          grep -oP 'https?://[^ )"]+\?plugin=[^ )"]+' README.md > plugin_urls_raw.txt
          grep -oP '(?<=\?plugin=)[^ )"]+'           plugin_urls_raw.txt > plugin_urls.txt

      # ---------- 2. 调 Script-Hub 生成 .sgmodule ----------
      - name: Generate sgmodule files
        run: |
          mkdir -p Chores/sgmodule
          category="🚫 AD Block"
          enc_cat=$(echo "$category" | jq -sRr @uri)
          while read -r plugin_url; do
            [ -z "$plugin_url" ] && continue
            name=$(basename "$plugin_url" .plugin)
            enc=$(echo "$name" | jq -sRr @uri)
            url="http://localhost:9101/file/_start_/${plugin_url}/_end_/${enc}.sgmodule?type=loon-plugin&target=surge-module&category=$enc_cat"
            echo "↓  $url"
            curl -Ls -A "Surge Mac/2985" "$url" -o "Chores/sgmodule/$name.sgmodule" \
              || echo "::warning ::Failed to download $name.sgmodule"
          done < plugin_urls.txt

      # ---------- 3. 镜像外部 JS 并替换链接 ----------
      - name: Mirror external JS & rewrite links
        shell: bash
        run: |
          set -e
          mkdir -p Chores/js
          
          # 检查是否有生成的 sgmodule 文件
          if [ ! -d "Chores/sgmodule" ] || [ -z "$(ls -A Chores/sgmodule 2>/dev/null)" ]; then
            echo "No sgmodule files found to process"
            exit 0
          fi
          
          echo "Generated sgmodule files:"
          ls -la Chores/sgmodule/
        
          
          # 提取所有 JavaScript URL
          echo "Searching for JS URLs..."
          
          # 使用更精确的正则表达式匹配 script-path 后的 URL
          find Chores/sgmodule -name "*.sgmodule" \
            -exec grep -hoE 'script-path\s*=\s*https?://[^[:space:],"]+\.js[^[:space:],"]*' {} \; 2>/dev/null \
            | sed -E 's/^script-path\s*=\s*//' \
            | sort -u > external-js-raw.txt || touch external-js-raw.txt
          
          echo "Found JavaScript URLs:"
          cat external-js-raw.txt || echo "No JS URLs found"
          
          # 过滤掉已经指向镜像的 URL
          if [ -s external-js-raw.txt ]; then
            grep -v "$MIRROR_KEY" external-js-raw.txt \
              | grep -v "$MIRROR_RAW" > external-js.txt \
              || touch external-js.txt
          else
            touch external-js.txt
          fi
          
          echo "External JS URLs to mirror:"
          cat external-js.txt || echo "No external JS URLs to mirror"

          # 如果没有需要镜像的 JS 文件，直接退出
          if [ ! -s external-js.txt ]; then
            echo "No external JS links found to mirror."
            rm -f external-js.txt external-js-raw.txt
            exit 0
          fi

          # 下载并镜像 JS 文件
          echo "Processing external JS files:"
          failed_downloads=0
          while IFS= read -r url; do
            [ -z "$url" ] && continue
            
            # 提取文件名，处理可能的查询参数
            filename=$(basename "${url%%[\?#]*}")
            
            # 确保文件名以 .js 结尾
            if [[ ! "$filename" =~ \.js$ ]]; then
              filename="${filename}.js"
            fi
            
            echo "Mirroring: $url → Chores/js/$filename"
            
            if curl -Ls -A "Surge Mac/3272" --connect-timeout 30 --max-time 60 "$url" -o "Chores/js/$filename"; then
              # 检查下载的文件是否为空或过小
              if [ -s "Chores/js/$filename" ] && [ "$(stat -c%s "Chores/js/$filename")" -gt 10 ]; then
                echo "✓ Successfully downloaded $filename"
                
                # 在所有 sgmodule 文件中替换链接
                mirror_url="$MIRROR_RAW/$filename"
                find Chores/sgmodule -name "*.sgmodule" -type f \
                  -exec perl -pi -e "s,\Q${url}\E,${mirror_url},g" {} \;
                
                echo "✓ Updated links: $url → $mirror_url"
              else
                echo "✗ Downloaded file is empty or too small: $filename"
                rm -f "Chores/js/$filename"
                ((failed_downloads++))
              fi
            else
              echo "✗ Failed to download: $url"
              ((failed_downloads++))
            fi
          done < external-js.txt
          
          echo "Processing complete. Failed downloads: $failed_downloads"
          
          # 清理临时文件
          rm -f external-js.txt external-js-raw.txt

      - name: Commit & push (if changed)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 检查是否有文件变化
          if [ ! -d "Chores/sgmodule" ] && [ ! -d "Chores/js" ]; then
            echo "No files to commit."
            exit 0
          fi

          # 暂存需要管控的文件
          git add Chores/sgmodule Chores/js 2>/dev/null || true

          # 检查暂存区是否为空
          if git diff --cached --quiet; then
            echo "Nothing to commit."
            exit 0
          fi

          # 显示将要提交的变化
          echo "Changes to be committed:"
          git diff --cached --name-status

          # 同步远端变化
          git fetch origin
          if git diff --quiet HEAD origin/main; then
            echo "Local branch is up to date with origin/main"
          else
            echo "Pulling latest changes from origin..."
            git pull --rebase origin main
            
            # rebase 后重新添加文件
            git add Chores/sgmodule Chores/js 2>/dev/null || true
            
            # rebase 后再次检查
            if git diff --cached --quiet; then
              echo "Nothing to commit after rebase."
              exit 0
            fi
          fi

          # 提交变化
          commit_msg="Update sgmodule & mirror JS files - $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git commit -m "$commit_msg"
          
          echo "Pushing changes..."
          git push origin main
          
          echo "✓ Successfully committed and pushed changes"

name: Mirror NSRingo Release Assets

on:
  schedule:
    - cron: '5,30,55 * * * *'  # Runs every 25 minutes
  workflow_dispatch:

jobs:
  download_assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set repository list
        run: |
          REPOS=(
            "NSRingo/WeatherKit"
            "NSRingo/News"
            "NSRingo/Testflight"
            "NSRingo/GeoServices"
            "NSRingo/Siri"
            "NSRingo/TV"
          )
          echo "REPOS<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${REPOS[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Download and categorize release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSETS_CHANGED=false
          UPDATED_FILES=()

          while IFS= read -r REPO; do
            echo "Processing repository: $REPO"

            RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/releases/latest")

            if [ "$(echo "$RELEASE" | jq -r '.message')" = "Not Found" ]; then
              echo "Release not found for $REPO, skipping."
              continue
            fi

            ASSETS=$(echo "$RELEASE" | jq -c '.assets[]')

            echo "$ASSETS" | while IFS= read -r ASSET; do
              ASSET_NAME=$(echo "$ASSET" | jq -r '.name')
              ASSET_URL=$(echo "$ASSET" | jq -r '.url')

              EXTENSION="${ASSET_NAME##*.}"

              case "$EXTENSION" in
                plugin)
                  OUTPUT_DIR="./iRingo/plugin"
                  ;;
                sgmodule)
                  OUTPUT_DIR="./iRingo/sgmodule"
                  ;;
                snippet)
                  OUTPUT_DIR="./iRingo/snippet"
                  ;;
                stoverride)
                  OUTPUT_DIR="./iRingo/stoverride"
                  ;;
                *)
                  echo "Skipping file: $ASSET_NAME"
                  continue
                  ;;
              esac

              mkdir -p "$OUTPUT_DIR"

              OUTPUT_FILE="$OUTPUT_DIR/$ASSET_NAME"

              # Download the asset
              echo "Downloading: $ASSET_NAME to $OUTPUT_FILE"
              curl -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" "$ASSET_URL" -o "$OUTPUT_FILE.tmp"

              # Check if the file has changed
              if [ -f "$OUTPUT_FILE" ]; then
                if cmp -s "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"; then
                  echo "No changes in $ASSET_NAME"
                  rm "$OUTPUT_FILE.tmp"
                else
                  echo "Updating $ASSET_NAME"
                  mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
                  UPDATED_FILES+=("$ASSET_NAME")
                  ASSETS_CHANGED=true
                fi
              else
                echo "Adding new file $ASSET_NAME"
                mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
                UPDATED_FILES+=("$ASSET_NAME")
                ASSETS_CHANGED=true
              fi

            done

          done < <(printf '%s\n' "${REPOS[@]}")

          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV
          echo "UPDATED_FILES<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${UPDATED_FILES[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit and push changes to main branch
        if: env.ASSETS_CHANGED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"

          git add .

          # Prepare the commit message with updated files
          COMMIT_MESSAGE="Updated assets: ${UPDATED_FILES[*]} at $DATE (UTC+8)"

          git commit -m "$COMMIT_MESSAGE"
          git push origin main

      - name: No changes detected
        if: env.ASSETS_CHANGED != 'true'
        run: echo "No changes detected. Workflow will exit without committing."

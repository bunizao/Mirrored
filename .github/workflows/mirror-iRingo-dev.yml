name: Mirror Upstream Dev Branches

on:
  schedule:
    - cron: '0,25,50 * * * *'  # Runs every 25 minutes
  workflow_dispatch:

jobs:
  mirror_dev_branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Set repository list
        run: |
          REPOS=(
            "NSRingo/WeatherKit"
            "NSRingo/News"
            "NSRingo/Testflight"
            "NSRingo/GeoServices"
            "NSRingo/Siri"
            "NSRingo/TV"
          )
          echo "REPOS<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${REPOS[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Mirror upstream dev branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          ASSETS_CHANGED=false
          UPDATED_REPOS=()

          while IFS= read -r REPO; do
            echo "Processing repository: $REPO"

            REPO_NAME=$(basename "$REPO")
            UPSTREAM_REPO="https://github.com/$REPO.git"

            # Add the upstream repository as a remote
            git remote add "$REPO_NAME" "$UPSTREAM_REPO"

            # Check if the dev branch exists in the upstream repository
            if git ls-remote --exit-code --heads "$UPSTREAM_REPO" dev; then
              # Fetch the dev branch from the upstream repository
              git fetch "$REPO_NAME" dev

              # Merge the upstream dev branch into the local dev branch using 'theirs' strategy and no commit
              echo "Merging $REPO_NAME/dev into local dev branch"

              # Perform the merge without committing
              git merge --allow-unrelated-histories -X theirs --no-commit "$REPO_NAME/dev"

              # Discard any changes to workflow files
              git reset HEAD .github/workflows/
              git checkout -- .github/workflows/

              # Check if there are any changes to commit
              if [[ -n $(git diff --cached --name-only) ]]; then
                # Commit the merge
                git commit -m "Merged $REPO_NAME/dev into dev branch"

                # Add repository to updated list
                UPDATED_REPOS+=("$REPO_NAME")
                ASSETS_CHANGED=true
              else
                echo "No changes detected after merging $REPO_NAME/dev"
                # Abort the merge
                git merge --abort
              fi
            else
              echo "Branch 'dev' not found in $REPO, skipping."
            fi

            # Remove the remote
            git remote remove "$REPO_NAME"

          done < <(printf '%s\n' "${REPOS[@]}")

          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV
          echo "UPDATED_REPOS<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${UPDATED_REPOS[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Push changes to dev branch
        if: env.ASSETS_CHANGED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin dev

      - name: No changes detected
        if: env.ASSETS_CHANGED != 'true'
        run: echo "No changes detected. Workflow will exit without pushing."

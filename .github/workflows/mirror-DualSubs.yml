name: Mirror DualSubs Repositories

on:
  schedule:
    - cron: '5,30,55 * * * *'  # Runs at minute 5, 30, and 55 of every hour
  workflow_dispatch:

jobs:
  download_dualsubs_repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set DualSubs repository list
        run: |
          REPOS=(
            "DualSubs/YouTube"
            "DualSubs/Universal"
            "DualSubs/Netflix"
            "DualSubs/Spotify"
          )
          echo "REPOS<<EOF" >> $GITHUB_ENV
          printf "%s\n" "${REPOS[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install rsync (if not available)
        run: sudo apt-get install -y rsync

      - name: Clone and collect assets from DualSubs repositories
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSETS_CHANGED=false

          # Directory to store cloned repositories
          CLONE_DIR="./cloned_dualsubs_repos"
          mkdir -p "$CLONE_DIR"

          while IFS= read -r REPO; do
            echo "Processing repository: $REPO"

            REPO_NAME=$(basename "$REPO")
            REPO_URL="https://github.com/$REPO.git"

            # Clone the repository
            echo "Cloning $REPO"
            git clone --depth=1 "$REPO_URL" "$CLONE_DIR/$REPO_NAME"

            # Check if clone was successful
            if [ ! -d "$CLONE_DIR/$REPO_NAME" ]; then
              echo "Failed to clone $REPO, skipping."
              continue
            fi

            # Define source and destination directories
            SOURCE_DIR="$CLONE_DIR/$REPO_NAME"
            DEST_DIR="./DualSubs/$REPO_NAME"

            # Create destination directory
            mkdir -p "$DEST_DIR"

            # Copy desired assets from the source to the destination
            # Adjust the paths and patterns below based on where the assets are located in the repositories
            echo "Collecting assets from $REPO_NAME"

            # Example: Copy all files in the repository (excluding .git directory)
            rsync -av --exclude='.git/' "$SOURCE_DIR/" "$DEST_DIR/"

            # Set ASSETS_CHANGED to true if any files were updated
            if [ "$(git status --porcelain)" ]; then
              ASSETS_CHANGED=true
              echo "Assets updated for $REPO_NAME"
            else
              echo "No changes detected for $REPO_NAME"
            fi

            # Clean up cloned repository
            rm -rf "$SOURCE_DIR"

          done < <(printf '%s\n' "${REPOS[@]}")

          echo "ASSETS_CHANGED=$ASSETS_CHANGED" >> $GITHUB_ENV

      - name: Commit and push changes to main branch
        if: env.ASSETS_CHANGED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e  # Disable exit on error
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"

          git add .

          COMMIT_MESSAGE="üå¨Ô∏è Synched DualSubs repositories at $DATE (UTC+8)"

          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "$COMMIT_MESSAGE"
            git push origin main
          fi

      - name: No changes detected
        if: env.ASSETS_CHANGED != 'true'
        run: echo "No changes detected. Workflow will exit without committing."
